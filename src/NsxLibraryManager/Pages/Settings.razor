@page "/settings"
@using NsxLibraryManager.Shared.Enums
@using NsxLibraryManager.Shared.Settings


<NavigationLock ConfirmExternalNavigation="false"
                OnBeforeInternalNavigation="OnBeforeInternalNavigation" />

<PageTitle>Settings</PageTitle>
<RadzenRow>
    <RadzenColumn Size="12">
        @if (Configuration.GetValue<string>("IsDefaultConfigCreated") == "True")
        {
            <RadzenText Text="Default configuration created"/>
        }

    </RadzenColumn>
</RadzenRow>
<RadzenFieldset Text="Library">
    <RadzenRow Gap="1rem">
        <RadzenColumn Size="12" SizeSM="12">
            <RadzenStack>
                <RadzenFormField Text="Database Path">
                    <ChildContent>
                        <RadzenTextBox Disabled="@_databaseFieldDisabled" @bind-Value="@_config.LibraryDatabase" Name="LibraryDatabase"/>
                    </ChildContent>
                    <Helper>
                        <div class="rz-text-caption">
                            <text>Can't change database while app is running, change it in config.json and restart the app.</text>
                        </div>
                    </Helper>
                </RadzenFormField>
                <RadzenRow AlignItems="AlignItems.Start" >
                    <RadzenColumn Size="6">
                        <div class="rz-fileupload" style="width: 100%">
                            <div class="rz-fileupload-buttonbar">
                                <a href="/api/download/userdata">
                                    <RadzenButton ButtonStyle="ButtonStyle.Success" Text="Export UserData" class="rz-m-0"/>
                                </a>
                                <text class="rz-text-caption">Only user data is exported (ratings, collections).</text>
                            </div>
                        </div>

                    </RadzenColumn>
                    <RadzenColumn Size="6">
                        <RadzenUpload Url="/api/upload/userdata"
                                      ChooseText="Import UserData"
                                      Progress=@(args => OnUploadProgress(args, "Single file upload"))
                                      Complete="@OnUploadUserDataComplete" Error="@OnUploadError"
                                      Style="width: 100%;"
                                      InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select file" }})">
                        </RadzenUpload>
                    </RadzenColumn>
                </RadzenRow>
                <RadzenFormField Text="Keys">
                    <RadzenRow Gap="2rem" RowGap="2rem" class="rz-m-0 rz-m-md-12">
                        <RadzenColumn Size="6">
                            <RadzenStack>
                                <RadzenFormField AllowFloatingLabel="false" Text="Prod Keys File">
                                    <ChildContent>
                                        <RadzenTextBox Disabled="@_databaseFieldDisabled" @bind-Value="@_config.ProdKeys" Name="ProdKeys"/>
                                    </ChildContent>
                                </RadzenFormField>
                            </RadzenStack>
                            <RadzenStack>
                                <RadzenFormField AllowFloatingLabel="false" Text="Title Keys File">
                                    <ChildContent>
                                        <RadzenTextBox Disabled="@_databaseFieldDisabled" @bind-Value="@_config.TitleKeys" Name="TitleKeys"/>
                                    </ChildContent>
                                </RadzenFormField>
                            </RadzenStack>
                            <RadzenStack>
                                <RadzenFormField AllowFloatingLabel="false" Text="Console Keys File">
                                    <ChildContent>
                                        <RadzenTextBox Disabled="@_databaseFieldDisabled" @bind-Value="@_config.ConsoleKeys" Name="ConsoleKeys"/>
                                    </ChildContent>
                                </RadzenFormField>
                            </RadzenStack>
                            <RadzenStack>
                                <RadzenText TextStyle="TextStyle.Caption">Missing keys will be derived from existing keys if possible,
                                    keys are necessary to read the nsp packages, if no keys are provided system will try to load them from the path @_homeDirKeysFilePath
                                    if no keys are found there either the file name will be used to get the title info from titledb, but any operation that needs to identify a title
                                    will be limited. Most of the time prod.keys is enough to get the package info.</RadzenText>
                            </RadzenStack>
                        </RadzenColumn>
                        <RadzenColumn Size="6">
                            <RadzenCard Variant="Variant.Outlined">
                                <RadzenUpload id="ddUpload" @ref="_uploadDd" ChooseText="Drag and drop here or click to choose keyfiles"
                                              Auto="true" Multiple="true" Url="api/upload/keys" InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "select file" } })"
                                              Progress=@(args => OnUploadProgress(args, "Drag and drop files to upload")) Complete="@OnUploadKeysComplete" Error="@OnUploadError" Style="width: 100%"/>
                                <RadzenButton Text="Remove Current Keys" Click=@(args => ClearKeys()) class="rz-mt-4"/>
                            </RadzenCard>
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenFormField>
                <RadzenFieldset Text="Paths">
                    <RadzenRow Gap="1.2rem">
                        <RadzenColumn Size="12" SizeSM="6">
                            <RadzenStack>
                                <RadzenFormField Text="Backup Path">
                                    <ChildContent>
                                        <RadzenTextBox @bind-Value="@_config.BackupPath"  @oninput="@ConfigChanged"  Name="BackupPath"/>
                                    </ChildContent>
                                    <Helper>
                                        @if (@_validationErrors["BackupPath"] != string.Empty)
                                        {
                                            <div class="rz-message rz-messages-error">@_validationErrors["BackupPath"]</div>
                                        }
                                        <div class="rz-text-caption">
                                            Location where the deleted files will be placed, when removing duplicates.
                                        </div>
                                    </Helper>
                                </RadzenFormField>
                            </RadzenStack>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeSM="6">
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenRow>
                        <RadzenColumn Size="12">
                            <RadzenStack>
                                <RadzenDataGrid
                                    @ref="_additionalLibraryPathsGrid"
                                    TItem="LibraryLocation"
                                    Data="@_libraryLocationData"
                                    EditMode="DataGridEditMode.Single"
                                    ShowEmptyMessage="false"
                                    RowUpdate="@OnUpdateLibraryLocationRow"
                                    RowCreate="@OnCreateLibraryLocationRow"
                                    Count="@_count"
                                    IsLoading="@_isLoading"
                                    AllowAlternatingRows="true"
                                    AllowSorting="false"
                                    AllowPaging="false"
                                    PageSize="5"
                                    AllowFiltering="false"
                                    AllowColumnResize="true"
                                    PagerHorizontalAlign="HorizontalAlign.Center"
                                    ColumnWidth="200px"
                                    AllowColumnPicking="false"
                                    ShowPagingSummary="true"
                                >
                                    <HeaderTemplate>
                                        <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="Add New Library Path" Click="@InsertRow" Disabled="@_newRecordInsertDisabled"/>
                                    </HeaderTemplate>
                                    <Columns>
                                        <RadzenDataGridColumn Property="Path" Title="Library Path" Width="280px" SortOrder="SortOrder.Ascending">
                                            <EditTemplate Context="libraryData">
                                                <RadzenTextBox @bind-Value="libraryData.Path"  Style="width:100%; display: block" Name="Name" aria-label="Enter name" />
                                                <RadzenCustomValidator Component="Name" Validator="@(() => ValidatePath(libraryData.Path))" Text="@_libraryPathValidationMessage" Popup="false" />
                                            </EditTemplate>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn Property="Recursive" Title="Recursive" Width="50px" FormatString="{0}" FormatProvider="@_myBooleanProvider">
                                            <EditTemplate Context="libraryData">
                                                <RadzenCheckBox @bind-Value="@libraryData.Recursive" />
                                            </EditTemplate>
                                        </RadzenDataGridColumn>


                                        <RadzenDataGridColumn Property="CollectionId" Title="Collection">
                                            <EditTemplate Context="libraryData">
                                                <RadzenDropDown @bind-Value="libraryData.CollectionId" Data="@_collections" ValueProperty="Id" TextProperty="Name" Placeholder="Select collection" Style="width:100%; display: block;"
                                                                InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select Collection" }})">
                                                </RadzenDropDown>
                                            </EditTemplate>
                                            <Template Context="libraryData">
                                                @GetCollectionName(libraryData.CollectionId)
                                            </Template>
                                        </RadzenDataGridColumn>

                                        <RadzenDataGridColumn Context="libraryData" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                                            <Template Context="libraryData">
                                                <RadzenButton Icon="add_circle" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Shade="Shade.Lighter" Click="@(() => InsertNewLibraryLocation(libraryData))" title="Add new row after this row"  Disabled="@_newRecordInsertDisabled"/>
                                                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => EditLibraryLocation(libraryData))" @onclick:stopPropagation="true" />
                                                <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.Medium" Shade="Shade.Lighter" class="rz-my-1 rz-ms-1" Click="@(args => DeleteLibraryLocation(libraryData))" @onclick:stopPropagation="true" />
                                            </Template>
                                            <EditTemplate Context="libraryData">
                                                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveNewLibraryLocation(libraryData))" aria-label="Save"/>
                                                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@((args) => CancelEdit(libraryData))" aria-label="Cancel"/>
                                                <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.Medium" Shade="Shade.Lighter" class="rz-my-1 rz-ms-1" Click="@(args => DeleteLibraryLocation(libraryData))" aria-label="Delete" />
                                            </EditTemplate>
                                        </RadzenDataGridColumn>
                                    </Columns>
                                </RadzenDataGrid>
                            </RadzenStack>
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenRow Gap="0">
                        <RadzenColumn Size="12" SizeSM="6">
                            <div class="rz-text-caption">
                                To manage libraries across multiple locations, add each folder individually. Optionally assign a specific collection to any folder location—files added there will automatically join that collection. At least one folder must be added to your library.
                            </div>
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenFieldset>
                <RadzenFieldset Text="Library settings">
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="6">
                            <RadzenRow>
                                <RadzenColumn Size="6">
                                    <RadzenSwitch Name="UseEnglishNaming" @bind-Value="@_config.UseEnglishNaming" Change=@(args => ConfigChanged()) InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Switch value" }})" MouseEnter="@(args => ShowTooltip("For titles in Asia regions (JP, CN, KO, HK) prefer Nswdb for title name", args))"/>
                                    <RadzenLabel Text="Try to use english naming." Component="UseEnglishNaming" Style="margin-left: 8px; vertical-align: middle;"/>
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="6">
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="6">
                                    <RadzenButton 
                                        Text="Clear persistent titles" 
                                        Click=@(args => ClearPersistentData()) 
                                        ButtonStyle="ButtonStyle.Danger" 
                                        MouseEnter="@(args => ShowTooltip("Used to persist user rating, collection, between library reloads.", args, new TooltipOptions() { Delay = 500, Duration = 5000, Position = TooltipPosition.Bottom }))"/>
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenFieldset>
                <RadzenFieldset Text="Library events webhooks">
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="3">
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12">
                                    <RadzenSwitch Name="ReloadWebhook" @bind-Value="@_config.LibraryReloadPostWebhook" Change=@(args => ConfigChanged()) InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "Enable webhook" } })" MouseEnter="@(args => ShowTooltip("Enable webhook calls on library reload", args))"/>
                                    <RadzenLabel Text="Library reload webhook" Component="ReloadWebhook" Style="margin-left: 8px; vertical-align: middle;"/>
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="5">
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12">
                                    <RadzenFormField Text="Webhook URL" Style="width: 100%;">
                                        <ChildContent>
                                            <RadzenTextBox Placeholder="Webhook URL" Name="ReloadWebhookUrl" @bind-Value="@_config.LibraryReloadWebhookUrl" Change=@(args => ConfigChanged()) Style="width: 100%;" Disabled="@(!_config.LibraryReloadPostWebhook)"/>
                                        </ChildContent>
                                        <Helper>
                                            @if (@_validationErrors["LibraryReloadWebhookUrl"] != string.Empty)
                                            {
                                                <div class="rz-message rz-messages-error">@_validationErrors["LibraryReloadWebhookUrl"]</div>
                                            }
                                            <div class="rz-text-caption">
                                                use a fully qualified URI including scheme (http or https), port, userinfo etc.
                                            </div>
                                        </Helper>
                                    </RadzenFormField>
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12">
                                    <RadzenLabel Text="Request method:" Component="WebhookRequestMethod" Style="display: block; margin-bottom: 8px;"/>
                                    <RadzenRadioButtonList @bind-Value="@_config.LibraryReloadWebhookRequestMethod" TValue="int" Change=@(args => ConfigChanged()) Disabled="@(!_config.LibraryReloadPostWebhook)">
                                        <Items>
                                            <RadzenRadioButtonListItem Text="POST" Value="@Convert.ToInt32(WebhookHttpMethod.Post)"/>
                                            <RadzenRadioButtonListItem Text="PUT" Value="@Convert.ToInt32(WebhookHttpMethod.Put)"/>
                                            <RadzenRadioButtonListItem Text="GET" Value="@Convert.ToInt32(WebhookHttpMethod.Get)"/>
                                        </Items>
                                    </RadzenRadioButtonList>
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenRow AlignItems="AlignItems.Center" class="rz-mt-2">
                        <RadzenColumn Size="12" SizeMD="3">
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12">
                                    <RadzenSwitch Name="WebhookRefresh" @bind-Value="@_config.LibraryRefreshPostWebhook" Change=@(args => ConfigChanged()) InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "Enable webhook" } })" MouseEnter="@(args => ShowTooltip("Enable webhook calls on library refresh", args))"/>
                                    <RadzenLabel Text="Library refresh webhook" Component="WebhookRefresh" Style="margin-left: 8px; vertical-align: middle;"/>
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="5">
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12">
                                    <RadzenFormField Text="Webhook URL" Style="width: 100%;">
                                        <ChildContent>
                                            <RadzenTextBox Placeholder="Webhook URL" Name="RefreshWebhookUrl" @bind-Value="@_config.LibraryRefreshWebhookUrl" Change=@(args => ConfigChanged()) Style="width: 100%;" Disabled="@(!_config.LibraryRefreshPostWebhook)"/>
                                        </ChildContent>
                                        <Helper>
                                            @if (@_validationErrors["LibraryRefreshWebhookUrl"] != string.Empty)
                                            {
                                                <div class="rz-message rz-messages-error">@_validationErrors["LibraryRefreshWebhookUrl"]</div>
                                            }
                                            <div class="rz-text-caption">
                                                use a fully qualified URI including scheme (http or https), port, userinfo etc.
                                            </div>
                                        </Helper>
                                    </RadzenFormField>
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="12">
                                    <RadzenLabel Text="Request method:" Component="WebhookRequestRefreshMethod" Style="display: block; margin-bottom: 8px;"/>
                                    <RadzenRadioButtonList @bind-Value="@_config.LibraryRefreshWebhookRequestMethod" TValue="int" Change=@(args => ConfigChanged()) Disabled="@(!_config.LibraryRefreshPostWebhook)">
                                        <Items>
                                            <RadzenRadioButtonListItem Text="POST" Value="1"/>
                                            <RadzenRadioButtonListItem Text="PUT" Value="2"/>
                                            <RadzenRadioButtonListItem Text="GET" Value="3"/>
                                        </Items>
                                    </RadzenRadioButtonList>
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenFieldset>
                
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
</RadzenFieldset>

<RadzenFieldset Text="Download Settings" >
    <RadzenRow Gap="1.2rem">
        <RadzenColumn Size="12" SizeSM="6">
            <RadzenStack>
                <RadzenFormField Text="TitleDb Url">
                    <ChildContent>
                        <RadzenTextBox @bind-Value="@_config.DownloadSettings.TitleDbUrl" @oninput="@ConfigChanged" ></RadzenTextBox>
                    </ChildContent>
                    <Helper>
                        @if (@_validationErrors["DownloadSettings.TitleDbUrl"] != string.Empty)
                        {
                            <div class="rz-message rz-messages-error">@_validationErrors["DownloadSettings.TitleDbUrl"]</div>    
                        }
                        <div class="rz-text-caption">
                            Where to get the SQL-TitleDb.
                        </div>                        
                    </Helper>
                </RadzenFormField>
            </RadzenStack>
        </RadzenColumn>
        <RadzenColumn Size="12" SizeSM="6">
            <RadzenStack>
                <RadzenFormField Text="TitleDb Version">
                    <ChildContent>
                        <RadzenTextBox @bind-Value="@_config.DownloadSettings.VersionUrl" @oninput="@ConfigChanged" ></RadzenTextBox>
                    </ChildContent>
                    <Helper>
                        @if (@_validationErrors["DownloadSettings.VersionUrl"] != string.Empty)
                        {
                            <div class="rz-message rz-messages-error">@_validationErrors["DownloadSettings.VersionUrl"]</div>    
                        }
                        <div class="rz-text-caption">
                            Url for the version file for SQL-Titledb.
                        </div>                            
                    </Helper>
                </RadzenFormField>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
    <RadzenRow Gap="1.2rem">
        <RadzenColumn Size="12" SizeSM="12">
            <RadzenStack>
                <RadzenFormField Text="Title Db Path">
                    <ChildContent>
                        <RadzenTextBox @bind-Value="@_config.TitleDatabase" Disabled="true"></RadzenTextBox>
                    </ChildContent>
                    <Helper>
                        @if (@_validationErrors["DownloadSettings.TitleDbPath"] != string.Empty)
                        {
                            <div class="rz-message rz-messages-error">@_validationErrors["DownloadSettings.TitleDbPath"]</div>    
                        }
                        <div class="rz-text-caption">
                            Location of SQL-TitleDb.
                        </div>                             
                    </Helper>
                </RadzenFormField>
            </RadzenStack>
            <RadzenStack>

            </RadzenStack>
        </RadzenColumn>

    </RadzenRow>
</RadzenFieldset>
<RadzenFieldset Text="Misc">
    <RadzenRow Gap="1rem">
        <RadzenColumn Size="6">
            <RadzenCard Variant="Variant.Outlined">
                <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap">
                    <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem" class="rz-p-sm-2">
                        <RadzenLabel Text="UI Theme" />
                        <RadzenDropDown Name="ThemeDropDown" TValue="string"  Value="@ThemeService.Theme" ValueChanged="@ChangeTheme" Data="@Themes.Free" TextProperty=@nameof(Theme.Text) ValueProperty=@nameof(Theme.Value)>
                        </RadzenDropDown>
                    </RadzenStack>
                </RadzenStack>
            </RadzenCard>
        </RadzenColumn>
        <RadzenColumn Size="6">
        </RadzenColumn>
    </RadzenRow>
</RadzenFieldset>
<RadzenRow Gap="1.2rem">
    <RadzenColumn Size="12" SizeSM="12">
        <RadzenRow Style="margin-top: .5rem;" JustifyContent="JustifyContent.Center">
            <RadzenButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Click="@SaveConfiguration" class="rz-ripple">Save Configuration</RadzenButton>
        </RadzenRow>
    </RadzenColumn>
</RadzenRow>
<style>
    #ddUpload {
        left: 0;
        --rz-upload-button-bar-background-color: transparent;
        --rz-upload-button-bar-padding: 0;
    }

    #ddUpload .rz-fileupload-buttonbar .rz-fileupload-choose {
        width: 100%;
        text-align: center;
        font-size: 16px;
        padding: 50px 0;
    }
</style>